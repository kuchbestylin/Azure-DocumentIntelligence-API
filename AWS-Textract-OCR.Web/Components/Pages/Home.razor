@page "/"
@using System.Text.Json;
@using System.Text;
@using Green.DocumentIntelligence.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using SharedProject.Services;
@using System.Net.Http.Headers
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer
@inject TooltipService tooltipService
@inject NotificationService NotificationService

<PageTitle>Home</PageTitle>

<div class="d-flex flex-wrap flex-column-reverse">
    <div class="col-5 d-flex flex-column justify-content-start gap-1">
        <InputFile disabled="@progressVisible" OnChange="IdUploaded" />
        <RadzenProgressBarCircular Value="100" Style="height: 2em; width: 2em;" ShowValue="false" Visible="progressVisible" Mode="ProgressBarMode.Indeterminate" />
    </div>
    <div class="col-4 my-3">
        <RadzenButton Style="background-color: green; width: 160px" MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){ Duration = 0, Position = TooltipPosition.Top }))">
            @((idNumber == null) ? "\"****** **** *\"" : idNumber)
        </RadzenButton>
    </div>
</div>

@code{
    string idNumber = null;
    static bool progressVisible = false;
    List<Grade12Result> items = new List<Grade12Result>();

    private async void IdUploaded(InputFileChangeEventArgs args)
    {
        progressVisible = true;
        var file = args.File;
        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri("https://localhost:7500");

            using (var content = new MultipartFormDataContent())
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15)); // Adjust maxAllowedSize as necessary
                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);

                content.Add(fileContent, "file", file.Name);

                HttpResponseMessage response = await client.PostAsync("/identitynumber", content);
                if (response.IsSuccessStatusCode)
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "ID Extracted!" });
                }
                idNumber = await response.Content.ReadAsStringAsync();
                Console.WriteLine(response.Content.ReadAsStringAsync());

            }
        }

        progressVisible = false;
        StateHasChanged();
    }

    private async void ResultsUploaded(InputFileChangeEventArgs args)
    {
        progressVisible = true;
        var file = args.File;
        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri("https://localhost:7500");

            using (var content = new MultipartFormDataContent())
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15)); // Adjust maxAllowedSize as necessary
                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);

                content.Add(fileContent, "file", file.Name);

                HttpResponseMessage response = await client.PostAsync("/grade12results", content);

                List<Grade12Result> gg = new List<Grade12Result>();
                items = await response.Content.ReadFromJsonAsync<List<Grade12Result>>();
            }
        }

        progressVisible = false;
        StateHasChanged();
    }
    void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>
    @<div>
         <b>Namibian National Identity Number</b>
    </div>, options);
}
