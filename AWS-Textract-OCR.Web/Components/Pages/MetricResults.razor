@page "/metrics"

@using System.Text.Json
@using System.Text
@using Green.DocumentIntelligence.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using SharedProject.Services;
@using System.Net.Http.Headers
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer
@inject TooltipService tooltipService
@inject NotificationService NotificationService

<PageTitle>Metric Results</PageTitle>

<div class="d-flex flex-wrap flex-column-reverse">
    <div class="col-5">
        <InputFile OnChange="ResultsUploaded" />
        <RadzenProgressBarCircular Value="100" ShowValue="false" Visible="progressVisible" Mode="ProgressBarMode.Indeterminate" />
    </div>
    <div class="col-12 col-lg-6 mb-5">
        <RadzenDataGrid AllowColumnReorder="true"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5"
                        AllowPaging="true" AllowSorting="true" Data="@items" TItem="Grade12Result" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Grade12Result" Property="Subject" Width="200px" Title="Subject" TextAlign="TextAlign.Center" Reorderable="false" Resizable="false" />
                <RadzenDataGridColumn TItem="Grade12Result" Property="Level" Width="100px" Title="Level" />
                <RadzenDataGridColumn TItem="Grade12Result" Property="Grade" Width="100px" Title="Grade" />
            </Columns>
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
            </EmptyTemplate>
        </RadzenDataGrid>
    </div>
    <div class="col-4 my-3">
        <RadzenButton Text="@idNumber" MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){ Style = "background: var(--rz-warning-light); color: var(--rz-text-color)", Duration = null, Position = TooltipPosition.Top }))" />
    </div>
</div>

@code {
    string idNumber = "";
    static bool progressVisible = false;
    List<Grade12Result> items = new List<Grade12Result>();

    private async void IdUploaded(InputFileChangeEventArgs args)
    {
        progressVisible = true;
        var file = args.File;
        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri("https://localhost:7500");

            using (var content = new MultipartFormDataContent())
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15)); // Adjust maxAllowedSize as necessary
                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);

                content.Add(fileContent, "file", file.Name);

                HttpResponseMessage response = await client.PostAsync("/identitynumber", content);
                if (response.IsSuccessStatusCode)
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "ID Extracted!" });
                }
                idNumber = await response.Content.ReadAsStringAsync();
                Console.WriteLine(response.Content.ReadAsStringAsync());

            }
        }

        progressVisible = false;
        StateHasChanged();
    }

    private async void ResultsUploaded(InputFileChangeEventArgs args)
    {
        progressVisible = true;
        var file = args.File;
        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri("https://localhost:7500");

            using (var content = new MultipartFormDataContent())
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15)); // Adjust maxAllowedSize as necessary
                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);

                content.Add(fileContent, "file", file.Name);

                HttpResponseMessage response = await client.PostAsync("/grade12results", content);

                List<Grade12Result> gg = new List<Grade12Result>();
                items = await response.Content.ReadFromJsonAsync<List<Grade12Result>>();
            }
        }

        progressVisible = false;
        StateHasChanged();
    }
    void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, ds =>
    @<div>
        <b>Namibian National Identity Number</b>
    </div>, options);
}
